Delivered-To: mauricelecordier@gmail.com
Received: by 2002:a92:48dd:0:0:0:0:0 with SMTP id j90csp1909874ilg;
        Thu, 6 Feb 2020 12:03:44 -0800 (PST)
X-Google-Smtp-Source: APXvYqyruZ35TsKPDFVcsJ934O0UZ6H7ve+klrCB7GXL3gJXh2Z2bgDhQCV3Y0ZXKQmu2KZUxotQ
X-Received: by 2002:aa7:c68f:: with SMTP id n15mr4796104edq.112.1581019424196;
        Thu, 06 Feb 2020 12:03:44 -0800 (PST)
ARC-Seal: i=1; a=rsa-sha256; t=1581019424; cv=none;
        d=google.com; s=arc-20160816;
        b=lFyHKUwGt6Z1nz/3oVCocnnzhYdAamsPzG7UL5CU+dH0RIHSTYmwDaJcdlWuj4hSLm
         zcmHg/+NZhJUvJh3PIsb+1hNal7qEWp2gN/V/AUr5WQduUZfgnjdakvSzVX6VpxiU1A+
         x3FqsgXa4kQNkBENQTBQhtH86qhiECbDpovbQA9TbGNEygVXTxPkz9yyzMJQWXpOdCqv
         aytIemibng/I1/xHtMnH/y/O/1REC2ArihuoRj7DBpAn07g1lZrIRne8o21xdlVszATI
         gAWqbcSCVmkcuCBlqMPiYaPhOIR2APil6zC5Cq9ODR4lYf4Th4MlNbNuGH40X7r0RQ6h
         qFbg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;
        h=to:list-unsubscribe:feedback-id:precedence:subject:message-id
         :mime-version:from:date:dkim-signature:dkim-signature;
        bh=UiLoW+c1pJrqCyl2VfPubUqieYpvQAe+bo5cXLNLSRU=;
        b=rlbaRjKa11eSGh0xBUStxzQ5D7fIkXkDL8CaPLCuJ1nUv/Erqll6AOGqYYzHekKc5S
         Sipktb7AuU6+mHwtAfJppqJuMTBMHjxsxQzdAeWtXdO5ofoebL9O2UH1HfWGzQdxMvwI
         Q+0nBp4gcoykPTDgNSROfevLJrKv+QV7ceQYPYlpf3x1E4XttaWrtUeQbXNN3z6CQjsh
         ycDQTERDPq6H7nyZOq4xKoojKakUT+yLDmusXTb1HELSRdiBdwOOC/aXyxQ1GTGc911E
         rImoXRn0J1c/NA2IdbCkmNG3vHCdp4qCnZeyO0FRqR3zUo4UledE+vgA5KNQbPrkyAfV
         7C1A==
ARC-Authentication-Results: i=1; mx.google.com;
       dkim=pass header.i=@overreacted.io header.s=cka header.b=UfLWkPcI;
       dkim=pass header.i=@sendgrid.info header.s=smtpapi header.b="YV6x/GRq";
       spf=pass (google.com: domain of bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io designates 167.89.29.34 as permitted sender) smtp.mailfrom="bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io"
Return-Path: <bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io>
Received: from o13.ck.m.convertkit.com (o13.ck.m.convertkit.com. [167.89.29.34])
        by mx.google.com with ESMTPS id rp10si280070ejb.486.2020.02.06.12.03.43
        for <mauricelecordier@gmail.com>
        (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
        Thu, 06 Feb 2020 12:03:44 -0800 (PST)
Received-SPF: pass (google.com: domain of bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io designates 167.89.29.34 as permitted sender) client-ip=167.89.29.34;
Authentication-Results: mx.google.com;
       dkim=pass header.i=@overreacted.io header.s=cka header.b=UfLWkPcI;
       dkim=pass header.i=@sendgrid.info header.s=smtpapi header.b="YV6x/GRq";
       spf=pass (google.com: domain of bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io designates 167.89.29.34 as permitted sender) smtp.mailfrom="bounces+9206630-450c-mauricelecordier=gmail.com@ckespa.overreacted.io"
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=overreacted.io;
	h=content-type:from:mime-version:subject:list-unsubscribe:x-feedback-id:
	to;
	s=cka; bh=UiLoW+c1pJrqCyl2VfPubUqieYpvQAe+bo5cXLNLSRU=;
	b=UfLWkPcIp11m9aM4Z0e9Ub/tXsjRmUDwlpom2OlaSY31NfHfKhIKSixHfhERsXe3QmUy
	awbjfqNymJO9EH9LuhckxP0zdlSiNpOspname6rUqmaVJZHqOS3zx+jBBFh8/R6WE5tG6J
	YMj7EsSoVT9DmmYk/rd05rjhYdtFK8Rhg=
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=sendgrid.info;
	h=content-type:from:mime-version:subject:list-unsubscribe:x-feedback-id:
	to;
	s=smtpapi; bh=UiLoW+c1pJrqCyl2VfPubUqieYpvQAe+bo5cXLNLSRU=;
	b=YV6x/GRqkuCkOqprVVd8ggn7VbQfJwtxcJ2VF7W2siFsyQm0LSkGdCnzWis2e0m3sQwu
	F8v6HO0BPsclgD+ivPP9IBNvxYJXNySX0SWV+EQSyeqjn5iTQDGQspcYBcSbP8L5yTQ8Xa
	FmYqlpItHomnU2q1Hb7mfp1DfNZg6LmEM=
Received: by filterdrecv-p3mdw1-77d77b4d7d-ms7vx with SMTP id filterdrecv-p3mdw1-77d77b4d7d-ms7vx-19-5E3C711E-76
        2020-02-06 20:03:42.703080899 +0000 UTC m=+4403.746848599
Received: from OTIwNjYzMA (unknown [18.218.244.8])
	by ismtpd0005p1iad1.sendgrid.net (SG) with HTTP id EMH-krncSrq53EiXkYnlsQ
	Thu, 06 Feb 2020 20:03:42.655 +0000 (UTC)
Content-Type: multipart/alternative; boundary=36815eafeb90c009f5fe8044958c06d3c80b964ce7f5b300f4e35d293410
Date: Thu, 06 Feb 2020 20:03:42 +0000 (UTC)
From: Dan Abramov <dan@overreacted.io>
Mime-Version: 1.0
Message-ID: <e5uv6elg80h0ukd4k8t8@convertkit-mail.com>
Subject: [Just JavaScript] 02. The JavaScript Universe
X-Report-Abuse: <abuse@convertkit.com>
Precedence: bulk
Feedback-ID: 2619259:107805:emailtemplate:CK
List-Unsubscribe: <https://el2.convertkit-mail.com/u/e5uv6elg80h0ukd4k8t8>
X-Report-Spam: <abuse@convertkit.com>
X-Feedback-ID: 9206630:SG
X-SG-EID: 
 =?us-ascii?Q?ZFQs2wSLSPBws886pe+8egA2HT58BISpkujbbr1zCiTLMb79B58jfZr85RAwY9?=
 =?us-ascii?Q?xWjXhYqksHptfeeo8V6HNTujft11GnGfx61N4e2?=
 =?us-ascii?Q?xslSR7G7RHsU6S1nADd09hP2WFVPV+E0C9xmLWe?=
 =?us-ascii?Q?kLW9VytlikviCMoeXJGg6hV3pnHB71Y4FOCG3rl?=
 =?us-ascii?Q?b335x188fCyazFbNgzvYptMKqCU5qu=2F8i0gHma6?=
 =?us-ascii?Q?sRxAUoD=2Flm5zCxo5VA5++pH9M8SgXPnn4N8=2Ft=2F4?=
 =?us-ascii?Q?W7WJQhu0af9hrBE3bG9mQ=3D=3D?=
X-SG-ID: 
 =?us-ascii?Q?N2C25iY2uzGMFz6rgvQsb8raWjw0ZPf1VmjsCkspi=2FJuvNbq56rw8btU4e1FM1?=
 =?us-ascii?Q?OT93YyA5voYQ7bYcWp3kxBBSfDiiMl=2FYl03xJQb?=
 =?us-ascii?Q?mLm+KgImjBxLvvgJxsRz8g2qa+D7Umj05wsD7NN?=
 =?us-ascii?Q?N23JtQI7WIW7M4V+Z71+U9YEuZmLv9nD2pEaJgc?=
 =?us-ascii?Q?btIB89QQ+vmz7ThsbkVaqfsdecE6AOBEwIK6ngn?=
 =?us-ascii?Q?fSQBiXHFzrbkeK=2FyXc9HhGy92ERw407fnny6e6Q?=
 =?us-ascii?Q?37pJe2a4mOH1D09HlRWiHcfkI=2FO0=2FQ9bSmOIxu3?=
 =?us-ascii?Q?9ArLRqqdU86AnYZhKZ1mt4ENNf=2FBXcWxXouzomM?=
 =?us-ascii?Q?Vdc6BFtCL+R2sQW1xd6zP0jZ5a5tkqKUfqDppDh?=
 =?us-ascii?Q?+WVQmAnXlmgK19ym0InLLJf=2Flzd1loSg=3D=3D?=
To: Maurice <mauricelecordier@gmail.com>

--36815eafeb90c009f5fe8044958c06d3c80b964ce7f5b300f4e35d293410
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset=utf-8
Mime-Version: 1.0

96

.mj-outlook-group-fix { width:100% !important; }

* *

In the beginning was the Value.

What is a value? It=E2=80=99s hard to say.

This is like asking what a number is in math, or what a
point is in geometry. A value is a thing in the JavaScript
universe.

Numbers are values =E2=80=94 but so are a few other things, like
objects and functions. However, many things, such as an if
statement or a variable declaration, are not values.

Code and Values

To distinguish values from everything else in my JavaScript
program, I like to imagine this drawing of the Little Prince by
Antoine de Saint-Exup=C3=A9ry:

I=E2=80=99m standing on a small asteroid =E2=80=94 it is the code of my
program.

On its surface, I see the if statements and variable
declarations, commas, curly braces, and all the other things one
might find in the JavaScript code.

My code contains instructions like =E2=80=9Cmake a function call=E2=80=9D
or =E2=80=9Cdo this thing many times=E2=80=9D, or even =E2=80=9Cthrow an er=
ror=E2=80=9D. I walk
through these instructions step by step =E2=80=94 running errands from my
small asteroid.

But every once in a while, I look up.

On a clear night, I see the different values in the
JavaScript sky: booleans, numbers, strings, symbols, functions
and objects, null and undefined =E2=80=94 oh my! I might refer to them in
my code, but they don=E2=80=99t exist inside my code.

In my JavaScript universe, values float in space.

=E2=80=9CHold on,=E2=80=9C you might say, =E2=80=9CI always thought of valu=
es as
being inside of my code!=E2=80=9D Here, I=E2=80=99m asking you to take a le=
ap of
faith. It will take a few more modules for this mental model to
pay off. Give it five minutes. ( https://el2.convertkit-mail.com/c/e5uv6elg=
80h0ukd4k8t8/58hvh8uokpzq75/aHR0cHM6Ly9zaWduYWx2bm9pc2UuY29tL3Bvc3RzLzMxMjQ=
tZ2l2ZS1pdC1maXZlLW1pbnV0ZXM=3D )

Back to values. Broadly, there are two kinds of them.

Primitive Values

Primitive Values are numbers and strings, among other things.
Open your browser's console and print these primitive values
using console.log():

console.log(2);
console.log("hello");
console.log(undefined);

All primitive values have something in common. There=E2=80=99s
nothing I can do in my code that would affect them. This sounds a
bit vague, so we=E2=80=99ll explore what this means concretely in the
next module. For now, I=E2=80=99ll say that primitive values are like
stars =E2=80=94 cold and distant, but always there when I need them.

That=E2=80=99s the first kind of values.

Objects and Functions

Objects and Functions are also values, but they are not
primitive. This makes them very special. Go ahead and log a few
of them to the browser console:

console.log({});
console.log([]);
console.log(x =3D> x * 2);

Notice how the browser console displays them differently
from the primitive values. Some browsers might display an arrow
before them, or do something special when you click them. If you
have a few different browsers installed (e.g. Chrome and
Firefox), compare how they visualize objects and functions.

Objects and functions are special because I can manipulate
them from my code. For example, I can connect them to other
values. This is rather vague =E2=80=94 so we=E2=80=99ll refine this idea in=
 a
later module. For now, I can say that if primitive values are
like distant stars, then objects and functions are more like
rocks floating nearby my code. They=E2=80=99re close enough that I can
manipulate them.

And that=E2=80=99s the second kind of values.

You might have questions. Good. If you ask a question, the
JavaScript universe might answer it! Provided, of course, that
you know how to ask.

Expressions

There are many questions JavaScript can=E2=80=99t answer. If you
want to know whether it=E2=80=99s better to confess your true feelings to
your best friend or to keep waiting until you both turn into
skeletons, JavaScript won=E2=80=99t be of much help.

But there are some questions that JavaScript would be
delighted to answer. These questions have a special name =E2=80=94 they
are called expressions.

If we =E2=80=9Cask=E2=80=9D the expression 2 + 2, JavaScript will =E2=80=9C=
answer=E2=80=9D
with the value 4.

console.log(2 + 2); // 4

Expressions are questions that JavaScript can answer.
JavaScript answers expressions in the only way it knows how =E2=80=94
with values.

If the word =E2=80=9Cexpression=E2=80=9D confuses you, think of it as a
piece of code that expresses a value. You might hear people say
that 2 + 2 =E2=80=9Cresults in=E2=80=9D or =E2=80=9Cevaluates to=E2=80=9D 4=
. These are all
different ways to say the same thing.

We ask JavaScript 2 + 2, and it answers with 4. Expressions
always result in a single value. Now we know enough about
expressions to be dangerous!

I previously said that there are many types of JavaScript
values: numbers, strings, objects, and so on. How do we know any
particular value=E2=80=99s type?

This sounds like a question. Do we dare to ask it?

Checking a Type

At first, all values in the JavaScript cosmos might look
the same =E2=80=94 bright dots in the sky. But if you look closely,
you=E2=80=99ll realize there are fewer than ten different types of
values. Values of the same type behave in similar ways.

If we want to check a value=E2=80=99s type, we can ask it with the
typeof operator. JavaScript will answer our question with one of
the predetermined string values, such as "number", "string", or
"object".

Below are a few examples you can try in the browser
console:

console.log(typeof(2)); // "number"
console.log(typeof("hello")); // "string"
console.log(typeof(undefined)); // "undefined"

Here, typeof(2) is an expression =E2=80=94 and it results in the
"number" value.

Strictly saying, using parens isn=E2=80=99t required with typeof.
For example, typeof 2 would work just as fine as typeof(2).
However, sometimes parens are required to avoid an ambiguity. One
of the cases below would break if we omitted the parens after
typeof. Try to guess which one it is:

console.log(typeof({})); // "object"
console.log(typeof([])); // "object" console.log(typeof(x =3D> x *
2)); // "function"

You can verify your guess in the browser console.

Now take another look at the last three examples =E2=80=94 this
time with close attention to their results. Did you find any of
these results surprising? Why?

Types of Values

As an aspiring astronomer, you might want to know about
every type of value that can be observed in the JavaScript sky.
After almost twenty five years of studying JavaScript, the
scientists have only discovered nine such types:

Primitive Values

* Undefined (undefined), used for unintentionally missing
values.
* Null (null), used for intentionally missing values.
* Booleans (true and false), used for logical operations.
* Numbers (-100, 3.14, and others), used for math calculations.
* Strings ("hello", "abracadabra", and others), used for text.
* Symbols (uncommon), used to hide implementation details.
* BigInts (uncommon and new), used for math on big numbers.

Objects and Functions

* Objects ({} and others), used to group related data and
code.
* Functions (x =3D> x * 2 and others), used to refer to code.

No Other Types

You might ask: =E2=80=9CBut what about other types I have used,
like arrays?=E2=80=9D

In JavaScript, there are no other fundamental value types other
than the ones we have just enumerated. The rest are all objects!
For example, even arrays, dates, and regular expressions
fundamentally are objects in JavaScript:

console.log(typeof([])); // "object"
console.log(typeof(new Date())); // "object"
console.log(typeof(/(hello|goodbye)/)); // "object"

=E2=80=9CI see,=E2=80=9D you might reply, =E2=80=9Cthis is because everythi=
ng is an
object!=E2=80=9D Alas, this is a popular urban legend, but it=E2=80=99s not=
 true.
Although code like "hi".toUpperCase() makes "hi" seem like an
object, this is nothing but an illusion. JavaScript creates a
wrapper object when you do this, and then immediately discards
it.

It=E2=80=99s fine if this mechanism doesn=E2=80=99t quite click yet. For
now, you only need to remember that primitive values, such as
numbers and strings, are not objects.

Recap

Let=E2=80=99s recap what we know so far:

* There are values, and then there=E2=80=99s everything else. We
can think of values as different things =E2=80=9Cfloating=E2=80=9D in our
JavaScript universe. They don=E2=80=99t exist inside our code, but we can
refer to them from our code.
* There are two categories of values: there are Primitive Values,
and then there are Objects and Functions. In total, there are
nine separate types. Each type serves a specific purpose, but
some are rarely used.
* Some values are lonely. For example, null is the only value of
the Null type, and undefined is the only value of the Undefined
type. As we will learn later, these two lonely values are quite
the troublemakers!
* We can ask questions with expressions. JavaScript will answer
to us with values. For example, the 2 + 2 expression is answered
with 4.
* We can inspect the type of something by wrapping it in a typeof
expression. For example, typeof(4) is the string value "number".

Exercises

Now it=E2=80=99s time to put what we learned to action.

Even if you already have a decent amount of experience with
JavaScript don't skip the exercise questions! I personally
learned some of these things only a few years ago.

Click here to answer these questions (
https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/lmueh6uv65zer8/aHR0c=
HM6Ly9lZ2doZWFkaW8udHlwZWZvcm0uY29tL3RvL1BMeVRLQj9lbWFpbD1tYXVyaWNlbGVjb3Jk=
aWVyQGdtYWlsLmNvbQ=3D=3D ) and provide feedback about this
module. When you complete the exercises I will send the next
module right away.

Next up we will explore the Primitive Values in more
detail. We look at what these different primitive types like
numbers and Null have in common, and learn a thing or two about
what equality means in JavaScript.

We will also continue to refine our mental model. This
module presents a crude sketch =E2=80=94 an approximation. We will focus
on different parts of the picture and fill them in with more
details, like a progressive JPEG ( https://el2.convertkit-mail.com/c/e5uv6e=
lg80h0ukd4k8t8/2zi2h9u04re6no/aHR0cHM6Ly93d3cubGlxdWlkd2ViLmNvbS9rYi93aGF0L=
WlzLWEtcHJvZ3Jlc3NpdmUtanBlZy8=3D )
image.

These might seem like small steps, but we=E2=80=99re laying the
foundation for everything else to come. We=E2=80=99re building the
JavaScript universe, together.

=E2=80=8B

Unsubscribe from Just JavaScript Draft emails (
https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/7dfnxne7h2upwvmq3r/a=
HR0cHM6Ly9qdXN0amF2YXNjcmlwdC5jb20vdW5zdWJzY3JpYmVk ) or Unsubscribe from A=
ll Emails (
https://el2.convertkit-mail.com/u/e5uv6elg80h0ukd4k8t8 )

Want to restart this course? You can reset your progress and
start from the beginning.

Once you click there is no undo! restart (
https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/70cn3q65h2upz289qw/a=
HR0cHM6Ly9qdXN0amF2YXNjcmlwdC5jb20vcmVzZXQ=3D )

337 Garden Oaks Blvd #97429, Houston, TX 77018
--36815eafeb90c009f5fe8044958c06d3c80b964ce7f5b300f4e35d293410
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset=utf-8
Mime-Version: 1.0

<!DOCTYPE html>
<html>
<head>
<style>@media only screen and (min-width:480px) {
        .mj-column-px-600 { width:600px !important; max-width: 600px; }
      }
@media only screen and (max-width:480px) {
      table.mj-full-width-mobile { width: 100% !important; }
      td.mj-full-width-mobile { width: auto !important; }
    }</style>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
</head>
<body style=3D"margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-si=
ze-adjust:100%">
<div class=3D"message-content" style=3D"max-width:600px">
<div style=3D"padding-bottom:10px">
   =20
   =20
     =20
        <title>
         =20
        </title>
        <!--[if !mso]><!-- -->
        <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3Dedge">
        <!--<![endif]-->
        <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3DU=
TF-8">
        <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-sc=
ale=3D1">
       =20
        <!--[if mso]>
        <xml>
        <o:OfficeDocumentSettings>
          <o:AllowPNG/>
          <o:PixelsPerInch>96</o:PixelsPerInch>
        </o:OfficeDocumentSettings>
        </xml>
        <![endif]-->
        <!--[if lte mso 11]>
        <style type=3D"text/css">
          .mj-outlook-group-fix { width:100% !important; }
        </style>
        <![endif]-->
       =20
      <!--[if !mso]><!-->
        <link href=3D"https://fonts.googleapis.com/css?family=3DRoboto" rel=
=3D"stylesheet" type=3D"text/css">
<link href=3D"https://fonts.googleapis.com/css?family=3DRoboto+Mono" rel=3D=
"stylesheet" type=3D"text/css">
       =20
      <!--<![endif]-->

   =20
       =20
   =20
   =20
 =20
       =20
       =20
       =20
     =20
     =20
       =20
       =20
      <div style=3D"padding-bottom:10px;background-color:#ffffff;">
       =20
     =20
      <!--[if mso | IE]>
      <table
         align=3D"center" border=3D"0" cellpadding=3D"0" cellspacing=3D"0" =
class=3D"" style=3D"width:100%;" width=3D"100"
      >
        <tr>
          <td style=3D"line-height:0px;font-size:0px;mso-line-height-rule:e=
xactly;">
      <![endif]-->
   =20
     =20
      <div style=3D"padding-bottom:10px;margin:0px auto;max-width:100%;">
       =20
        <table align=3D"center" border=3D"0" cellpadding=3D"0" cellspacing=
=3D"0" role=3D"presentation" style=3D"border-collapse:collapse;mso-table-ls=
pace:0pt;mso-table-rspace:0pt;width:100%;">
          <tbody>
            <tr>
              <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;ms=
o-table-rspace:0pt;direction:ltr;font-size:0px;padding:20px 0;text-align:ce=
nter;">
                <!--[if mso | IE]>
                  <table role=3D"presentation" border=3D"0" cellpadding=3D"=
0" cellspacing=3D"0">
               =20
        <tr>
     =20
            <td
               class=3D"" style=3D"vertical-align:top;width:600px;"
            >
          <![endif]-->
           =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
       =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>In the begi=
nning was the Value.</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">What <em>is</em=
> a value? It=E2=80=99s hard to say.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">This is like as=
king what a number is in math, or what a point is in geometry. <strong>A va=
lue is a <em>thing</em> in the JavaScript universe.</strong>
</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Numbers are val=
ues =E2=80=94 but so are a few other things, like objects and functions. Ho=
wever, many things, such as an <code>if</code> statement or a variable decl=
aration, are <em>not</em> values.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:30px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:37.90px;line-height:40px;text-align:left;color=
:#021326;'>Code and Values</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">To distinguish =
values from everything else in my JavaScript program, I like to imagine thi=
s drawing of the Little Prince by Antoine de Saint-Exup=C3=A9ry:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;border-collapse:collapse;border-spacing:0px;">
        <tbody>
          <tr>
            <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-=
table-rspace:0pt;width:550px;">
             =20
      <img alt=3D"Little Prince by Antoine de Saint-Exup=C3=A9ry" height=3D=
"auto" src=3D"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1578681449=
/just-javascript-email-images/jj02/little_prince.jpg" style=3D"border:0;lin=
e-height:100%;outline:none;text-decoration:none;-ms-interpolation-mode:bicu=
bic;max-width:100%;height:auto;border:0;display:block;outline:none;text-dec=
oration:none;height:auto;width:100%;font-size:13px;" width=3D"550">
   =20
            </td>
          </tr>
        </tbody>
      </table>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">I=E2=80=99m sta=
nding on a small asteroid =E2=80=94 it is the code of my program.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">On its surface,=
 I see the <code>if</code> statements and variable declarations, commas, cu=
rly braces, and all the other things one might find in the JavaScript code.=
</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">My code contain=
s instructions like =E2=80=9Cmake a function call=E2=80=9D or =E2=80=9Cdo t=
his thing many times=E2=80=9D, or even =E2=80=9Cthrow an error=E2=80=9D. I =
walk through these instructions step by step=C2=A0=E2=80=94=C2=A0running er=
rands from my small asteroid.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>But every o=
nce in a while, I look up.</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">On a clear nigh=
t, I see the different values in the JavaScript sky: booleans, numbers, str=
ings, symbols, functions and objects, <code>null</code> and <code>undefined=
</code> =E2=80=94 oh my! I might refer to them in my code, but they don=E2=
=80=99t exist <em>inside</em> my code.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>In my JavaS=
cript universe, values float in space.</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;border-collapse:collapse;border-spacing:0px;">
        <tbody>
          <tr>
            <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-=
table-rspace:0pt;width:550px;">
             =20
      <img alt=3D"JavaScript Values" height=3D"auto" src=3D"https://res.clo=
udinary.com/dg3gyk0gu/image/upload/v1578948516/just-javascript-email-images=
/jj02/universe.png" style=3D"border:0;line-height:100%;outline:none;text-de=
coration:none;-ms-interpolation-mode:bicubic;max-width:100%;height:auto;bor=
der:0;display:block;outline:none;text-decoration:none;height:auto;width:100=
%;font-size:13px;" width=3D"550">
   =20
            </td>
          </tr>
        </tbody>
      </table>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">=E2=80=9CHold o=
n,=E2=80=9C you might say, =E2=80=9CI always thought of values as being <em=
>inside</em> of my code!=E2=80=9D Here, I=E2=80=99m asking you to take a le=
ap of faith. It will take a few more modules for this mental model to pay o=
ff. <a href=3D"https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/58hvh=
8uokpzq75/aHR0cHM6Ly9zaWduYWx2bm9pc2UuY29tL3Bvc3RzLzMxMjQtZ2l2ZS1pdC1maXZlL=
W1pbnV0ZXM=3D" style=3D"text-decoration: none; border-bottom: 2px solid blu=
e; color: blue;">Give it five minutes.</a>
</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Back to values.=
 Broadly, there are two kinds of them.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>Primitive Values</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">
<strong>Primitive Values</strong> are numbers and strings, among other thin=
gs. Open your browser's console and print these primitive values using <cod=
e>console.log()</code>:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log(<span class=3D"hljs-number" style=3D"color: #0067DB;">2</span>);
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-string" style=3D"color: #DD0795;">"hello"</span>);
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-literal" style=3D"color: #0067DB;">undefined</span>);
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">All primitive v=
alues have something in common. <strong>There=E2=80=99s nothing I can do in=
 my code that would affect them.</strong> This sounds a bit vague, so we=E2=
=80=99ll explore what this means concretely in the next module. For now, I=
=E2=80=99ll say that primitive values are like stars =E2=80=94 cold and dis=
tant, but always there when I need them.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>That=E2=80=
=99s the first kind of values.</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>Objects and Functions</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">
<strong>Objects and Functions</strong> are also values, but they are not pr=
imitive. This makes them very special. Go ahead and log a few of them to th=
e browser console:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log({});
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
[]);
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-function"><span class=3D"hljs-params" style=3D"color: #=
0067DB;">x</span> =3D&gt;</span> x * <span class=3D"hljs-number" style=3D"c=
olor: #0067DB;">2</span>);
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Notice how the =
browser console displays them differently from the primitive values. Some b=
rowsers might display an arrow before them, or do something special when yo=
u click them. If you have a few different browsers installed (e.g. Chrome a=
nd Firefox), compare how they visualize objects and functions.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Objects and fun=
ctions are special because <strong>I can manipulate them from my code</stro=
ng>. For example, I can connect them to other values. This is rather vague =
=E2=80=94 so we=E2=80=99ll refine this idea in a later module. For now, I c=
an say that if primitive values are like distant stars, then objects and fu=
nctions are more like rocks floating nearby my code. They=E2=80=99re close =
enough that I can manipulate them.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>And that=E2=
=80=99s the second kind of values.</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">You might have =
questions. Good. If you ask a question, the JavaScript universe might answe=
r it! Provided, of course, that you know how to ask.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:30px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:37.90px;line-height:40px;text-align:left;color=
:#021326;'>Expressions</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">There are many =
questions JavaScript can=E2=80=99t answer. If you want to know whether it=
=E2=80=99s better to confess your true feelings to your best friend or to k=
eep waiting until you both turn into skeletons, JavaScript won=E2=80=99t be=
 of much help.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">But there are s=
ome questions that JavaScript would be <em>delighted</em> to answer. These =
questions have a special name =E2=80=94 they are called <em>expressions</em=
>.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">If we =E2=80=9C=
ask=E2=80=9D the expression <code>2 + 2</code>, JavaScript will =E2=80=9Can=
swer=E2=80=9D with the value <code>4</code>.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log(<span class=3D"hljs-number" style=3D"color: #0067DB;">2</span> + <sp=
an class=3D"hljs-number" style=3D"color: #0067DB;">2</span>); <span class=
=3D"hljs-comment" style=3D"color: #767391;">// 4</span>
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><strong>Express=
ions are questions that JavaScript can answer. JavaScript answers expressio=
ns in the only way it knows how =E2=80=94 with values.</strong></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;border-collapse:collapse;border-spacing:0px;">
        <tbody>
          <tr>
            <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-=
table-rspace:0pt;width:550px;">
             =20
      <img alt=3D"Expression" height=3D"auto" src=3D"https://res.cloudinary=
.com/dg3gyk0gu/image/upload/v1578681449/just-javascript-email-images/jj02/e=
xpression.gif" style=3D"border:0;line-height:100%;outline:none;text-decorat=
ion:none;-ms-interpolation-mode:bicubic;max-width:100%;height:auto;border:0=
;display:block;outline:none;text-decoration:none;height:auto;width:100%;fon=
t-size:13px;" width=3D"550">
   =20
            </td>
          </tr>
        </tbody>
      </table>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">If the word =E2=
=80=9Cexpression=E2=80=9D confuses you, think of it as a piece of code that=
 <em>expresses</em> a value. You might hear people say that <code>2 + 2</co=
de> =E2=80=9Cresults in=E2=80=9D or =E2=80=9Cevaluates to=E2=80=9D <code>4<=
/code>. These are all different ways to say the same thing.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">We ask JavaScri=
pt <code>2 + 2</code>, and it answers with <code>4</code>. <strong>Expressi=
ons always result in a single value.</strong> Now we know enough about expr=
essions to be dangerous!</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">I previously sa=
id that there are many types of JavaScript values: numbers, strings, object=
s, and so on. How do we know any particular value=E2=80=99s type?</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><em>This sounds=
 like a question. Do we dare to ask it?</em></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>Checking a Type</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">At first, all v=
alues in the JavaScript cosmos might look the same =E2=80=94 bright dots in=
 the sky. But if you look closely, you=E2=80=99ll realize there are fewer t=
han ten different types of values. Values of the same type behave in simila=
r ways.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">If we want to c=
heck a value=E2=80=99s type, we can ask it with the <code>typeof</code> ope=
rator. JavaScript will answer our question with one of the predetermined st=
ring values, such as <code>"number"</code>, <code>"string"</code>, or <code=
>"object"</code>.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;border-collapse:collapse;border-spacing:0px;">
        <tbody>
          <tr>
            <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-=
table-rspace:0pt;width:550px;">
             =20
      <img alt=3D"typeof" height=3D"auto" src=3D"https://res.cloudinary.com=
/dg3gyk0gu/image/upload/v1578948458/just-javascript-email-images/jj02/teles=
cope.png" style=3D"border:0;line-height:100%;outline:none;text-decoration:n=
one;-ms-interpolation-mode:bicubic;max-width:100%;height:auto;border:0;disp=
lay:block;outline:none;text-decoration:none;height:auto;width:100%;font-siz=
e:13px;" width=3D"550">
   =20
            </td>
          </tr>
        </tbody>
      </table>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Below are a few=
 examples you can try in the browser console:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log(<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>=
(<span class=3D"hljs-number" style=3D"color: #0067DB;">2</span>)); <span cl=
ass=3D"hljs-comment" style=3D"color: #767391;">// "number"</span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>(<span =
class=3D"hljs-string" style=3D"color: #DD0795;">"hello"</span>)); <span cla=
ss=3D"hljs-comment" style=3D"color: #767391;">// "string"</span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>(<span =
class=3D"hljs-literal" style=3D"color: #0067DB;">undefined</span>)); <span =
class=3D"hljs-comment" style=3D"color: #767391;">// "undefined"</span>
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Here, <code>typ=
eof(2)</code> is an expression =E2=80=94 and it results in the <code>"numbe=
r"</code> value.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Strictly saying=
, using parens isn=E2=80=99t required with <code>typeof</code>. For example=
, <code>typeof=C2=A02</code> would work just as fine as <code>typeof(2)</co=
de>. However, sometimes parens are required to avoid an ambiguity. One of t=
he cases below would break if we omitted the parens after <code>typeof</cod=
e>. Try to guess which one it is:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log(<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>=
({})); <span class=3D"hljs-comment" style=3D"color: #767391;">// "object"</=
span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>([])); =
<span class=3D"hljs-comment" style=3D"color: #767391;">// "object"</span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>(<span =
class=3D"hljs-function"><span class=3D"hljs-params" style=3D"color: #0067DB=
;">x</span> =3D&gt;</span> x * <span class=3D"hljs-number" style=3D"color: =
#0067DB;">2</span>)); <span class=3D"hljs-comment" style=3D"color: #767391;=
">// "function"</span>
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">You can verify =
your guess in the browser console.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;border-collapse:collapse;border-spacing:0px;">
        <tbody>
          <tr>
            <td style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-=
table-rspace:0pt;width:550px;">
             =20
      <img alt=3D"Using typeof" height=3D"auto" src=3D"https://res.cloudina=
ry.com/dg3gyk0gu/image/upload/v1578948458/just-javascript-email-images/jj02=
/typeof.gif" style=3D"border:0;line-height:100%;outline:none;text-decoratio=
n:none;-ms-interpolation-mode:bicubic;max-width:100%;height:auto;border:0;d=
isplay:block;outline:none;text-decoration:none;height:auto;width:100%;font-=
size:13px;" width=3D"550">
   =20
            </td>
          </tr>
        </tbody>
      </table>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Now take anothe=
r look at the last three examples =E2=80=94 this time with close attention =
to their results. Did you find any of these results surprising? Why?</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:30px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:37.90px;line-height:40px;text-align:left;color=
:#021326;'>Types of Values</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">As an aspiring =
astronomer, you might want to know about <em>every</em> type of value that =
can be observed in the JavaScript sky. After almost twenty five years of st=
udying JavaScript, the scientists have only discovered nine such types:</di=
v>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>Primitive Values</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><ul>
<li style=3D"padding-bottom: 8px;">
<strong>Undefined</strong> (<code>undefined</code>), used for unintentional=
ly missing values.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Null</strong> (<code>null</code>), used for intentionally missing v=
alues.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Booleans</strong> (<code>true</code> and <code>false</code>), used =
for logical operations.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Numbers</strong> (<code>-100</code>, <code>3.14</code>, and others)=
, used for math calculations.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Strings</strong> (<code>"hello"</code>, <code>"abracadabra"</code>,=
 and others), used for text.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Symbols</strong> (uncommon), used to hide implementation details.</=
li>
<li style=3D"padding-bottom: 8px;">
<strong>BigInts</strong> (uncommon and new), used for math on big numbers.<=
/li>
</ul></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>Objects and Functions</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><ul>
<li style=3D"padding-bottom: 8px;">
<strong>Objects</strong> (<code>{}</code> and others), used to group relate=
d data and code.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Functions</strong> (<code>x =3D&gt; x * 2</code> and others), used =
to refer to code.</li>
</ul></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:27px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:28.4px;line-height:31px;text-align:left;color:=
#021326;'>No Other Types</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">You might ask: =
=E2=80=9CBut what about other types I have used, like arrays?=E2=80=9D</div=
>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">
<strong>In JavaScript, there are no other fundamental value types other tha=
n the ones we have just enumerated.</strong> The rest are all objects! For =
example, even arrays, dates, and regular expressions fundamentally <em>are<=
/em> objects in JavaScript:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td vertical-align=3D"top" style=3D"border-collapse:collapse;=
mso-table-lspace:0pt;mso-table-rspace:0pt;font-size:0px;word-break:break-wo=
rd;">
               =20
      <div class=3D"mj-column-px-600 mj-outlook-group-fix" style=3D"padding=
-bottom:10px;font-size:0px;text-align:left;direction:ltr;display:inline-blo=
ck;vertical-align:top;width:100%;">
       =20
      <table border=3D"0" cellpadding=3D"0" cellspacing=3D"0" role=3D"prese=
ntation" style=3D"border-collapse:collapse;mso-table-lspace:0pt;mso-table-r=
space:0pt;vertical-align:top;" width=3D"100%">
        <pre style=3D"font-size:17px;padding-left:25px;font-family:RobotoMo=
no, monospace"><code style=3D"font-family:RobotoMono, monospace;line-height=
:28px"><span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</spa=
n>.log(<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>=
([])); <span class=3D"hljs-comment" style=3D"color: #767391;">// "object"</=
span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>(<span =
class=3D"hljs-keyword" style=3D"color: #700FB2;">new</span> <span class=3D"=
hljs-built_in" style=3D"color: #0067DB;">Date</span>())); <span class=3D"hl=
js-comment" style=3D"color: #767391;">// "object"</span>
<span class=3D"hljs-built_in" style=3D"color: #0067DB;">console</span>.log(=
<span class=3D"hljs-keyword" style=3D"color: #700FB2;">typeof</span>(<span =
class=3D"hljs-regexp" style=3D"color: #067389;">/(hello|goodbye)/</span>));=
 <span class=3D"hljs-comment" style=3D"color: #767391;">// "object"</span>
</code></pre>
      </table>
   =20
      </div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">=E2=80=9CI see,=
=E2=80=9D you might reply, =E2=80=9Cthis is because <em>everything</em> is =
an object!=E2=80=9D Alas, this is a popular urban legend, but it=E2=80=99s =
not true. Although code like <code>"hi".toUpperCase()</code> makes <code>"h=
i"</code> seem like an object, this is nothing but an illusion. JavaScript =
creates a wrapper object when you do this, and then immediately discards it=
.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">It=E2=80=99s fi=
ne if this mechanism doesn=E2=80=99t quite click yet. <strong>For now, you =
only need to remember that primitive values, such as numbers and strings, a=
re <em>not</em> objects.</strong>
</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:30px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:37.90px;line-height:40px;text-align:left;color=
:#021326;'>Recap</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Let=E2=80=99s r=
ecap what we know so far:</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;"><ol>
<li style=3D"padding-bottom: 8px;">
<strong>There are values, and then there=E2=80=99s everything else.</strong=
> We can think of values as different things =E2=80=9Cfloating=E2=80=9D in =
our JavaScript universe. They don=E2=80=99t exist <em>inside</em> our code,=
 but we can refer to them from our code.</li>
<li style=3D"padding-bottom: 8px;">
<strong>There are two categories of values: there are <em>Primitive Values<=
/em>, and then there are <em>Objects and Functions</em>.</strong> In total,=
 there are nine separate types. Each type serves a specific purpose, but so=
me are rarely used.</li>
<li style=3D"padding-bottom: 8px;">
<strong>Some values are lonely.</strong> For example, <code>null</code> is =
the only value of the Null type, and <code>undefined</code> is the only val=
ue of the Undefined type. As we will learn later, these two lonely values a=
re quite the troublemakers!</li>
<li style=3D"padding-bottom: 8px;">
<strong>We can ask questions with expressions.</strong> JavaScript will ans=
wer to us with values. For example, the <code>2 + 2</code> expression is an=
swered with <code>4</code>.</li>
<li style=3D"padding-bottom: 8px;">
<strong>We can inspect the type of something by wrapping it in a <code>type=
of</code> expression.</strong> For example, <code>typeof(4)</code> is the s=
tring value <code>"number"</code>.</li>
</ol></div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;padding-t=
op:30px;word-break:break-word;">
               =20
      <div style=3D'padding-bottom:10px;font-family:ff-meta-serif-pro, Pala=
tino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, syst=
em-ui-serif, serif;font-size:37.90px;line-height:40px;text-align:left;color=
:#021326;'>Exercises</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Now it=E2=80=99=
s time to put what we learned to action.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Even if you alr=
eady have a decent amount of experience with JavaScript don't skip the exer=
cise questions! I personally learned some of these things only a few years =
ago.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">
<a href=3D"https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/lmueh6uv6=
5zer8/aHR0cHM6Ly9lZ2doZWFkaW8udHlwZWZvcm0uY29tL3RvL1BMeVRLQj9lbWFpbD1tYXVya=
WNlbGVjb3JkaWVyQGdtYWlsLmNvbQ=3D=3D" style=3D"text-decoration: none; border=
-bottom: 2px solid blue; color: blue;">Click here to answer these questions=
</a> and provide feedback about this module. <em>When you complete the exer=
cises I will send the next module right away.</em>
</div>
   =20
              </td>
            </tr>
                   =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">Next up we will=
 explore the Primitive Values in more detail. We look at what these differe=
nt primitive types like numbers and Null have in common, and learn a thing =
or two about what equality means in JavaScript.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">We will also co=
ntinue to refine our mental model. This module presents a crude sketch =E2=
=80=94 an approximation. We will focus on different parts of the picture an=
d fill them in with more details, like a <a href=3D"https://el2.convertkit-=
mail.com/c/e5uv6elg80h0ukd4k8t8/2zi2h9u04re6no/aHR0cHM6Ly93d3cubGlxdWlkd2Vi=
LmNvbS9rYi93aGF0LWlzLWEtcHJvZ3Jlc3NpdmUtanBlZy8=3D" style=3D"text-decoratio=
n: none; border-bottom: 2px solid blue; color: blue;">progressive JPEG</a> =
image.</div>
   =20
              </td>
            </tr>
         =20
            <tr>
              <td align=3D"left" style=3D"border-collapse:collapse;mso-tabl=
e-lspace:0pt;mso-table-rspace:0pt;font-size:0px;padding:10px 25px;word-brea=
k:break-word;">
               =20
      <div style=3D"padding-bottom:10px;font-family:Roboto, sans-serif;font=
-size:16px;line-height:28px;text-align:left;color:#2e2e32;">These might see=
m like small steps, but we=E2=80=99re laying the foundation for everything =
else to come. We=E2=80=99re building the JavaScript universe, together.</di=
v>
   =20
              </td>
            </tr>
         =20
      </table>
   =20
      </div>
   =20
          <!--[if mso | IE]>
            </td>
         =20
        </tr>
     =20
                  </table>
                <![endif]-->
              </td>
            </tr>
          </tbody>
        </table>
       =20
      </div>
   =20
     =20
      <!--[if mso | IE]>
          </td>
        </tr>
      </table>
      <![endif]-->
   =20
   =20
      </div>
   =20
     =20
   =20
  </div>
<p style=3D"margin-bottom:1em;display:block;margin:13px 0">=E2=80=8B</p>
<br>
<br>
<small>
<a href=3D"https://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/7dfnxne7h=
2upwvmq3r/aHR0cHM6Ly9qdXN0amF2YXNjcmlwdC5jb20vdW5zdWJzY3JpYmVk">Unsubscribe=
 from Just JavaScript Draft emails</a> or <a href=3D"https://el2.convertkit=
-mail.com/u/e5uv6elg80h0ukd4k8t8">Unsubscribe from All Emails</a>
<br><br>
Want to restart this course?  You can reset your progress and start from th=
e beginning. <br><br><em>Once you click there is no undo!</em> <a href=3D"h=
ttps://el2.convertkit-mail.com/c/e5uv6elg80h0ukd4k8t8/70cn3q65h2upz289qw/aH=
R0cHM6Ly9qdXN0amF2YXNjcmlwdC5jb20vcmVzZXQ=3D">restart</a>
<br><br>
337 Garden Oaks Blvd #97429, Houston, TX 77018
<br><br>
</small>
</div>

<!-- --><img src=3D"https://el2.convertkit-mail.com/o/e5uv6elg80h0ukd4k8t8"=
 alt=3D"" style=3D"border:0;height:auto;line-height:100%;outline:none;text-=
decoration:none;-ms-interpolation-mode:bicubic">
<img src=3D"http://link.n.convertkit.com/wf/open?upn=3Dxti06AnODFLB1YGot7de=
MUuohV55IokwmkFrXUzQHnFCSF6kP17tMYAQqOhYc7bjGeixSKg15cYRVZLdHeLLueW1W4JPARg=
0frmyTp0MP-2FMQ7s6CPOEuxW8K07ukM-2B8yD1b4RT-2FOuhX6G6b2331OKA2WMbjv3pgv02Jh=
0vrpOOi-2B7LZ4Jq6fHxAyTqUl9k9TvTxJT6QW7gVF2ViQ89XcfS2IpA67bU-2FqwQQ50uz-2Bi=
rA6EIGhIEmu0zm2oWkdcSJDYveJmYYMlcvUZuAeNN9GHg3qhLLfwT8ZmZftctR6bckXuVqnWPqX=
nE3Fp6JanwBuoSSNRUSSRl-2B58Eq-2FZMv0OdvEZuCHGGwQmCFrbtb1lTP3qPl7441kG51W9QE=
-2BMS0kwgKAeISRQWL3Lz5JbT3ffs0vrDLOxLXE-2B-2Fk5K1ctKp3ojlIH-2F-2B-2F40rvynn=
RqvWMroyj5P-2B0KDUqN8xMyCbEdW-2FeXlFMA-2FeeozkfHIeqElO2ZiPqujEclwvlIbOlG2pC=
MSRrhN7hecppl-2BXDt7i5Bz8uOMQMt46dxHD-2FUGJA1tMfOPCDerAmKCuf7Trm2i9yq8DRIQe=
-2BzAyKI-2FY8yMemcY2dpOangF7hhCKGJ7EVG5jYgED72EJeOjZZer29t-2FuDD" alt=3D"" =
width=3D"1" height=3D"1" border=3D"0" style=3D"height:1px !important;width:=
1px !important;border-width:0 !important;margin-top:0 !important;margin-bot=
tom:0 !important;margin-right:0 !important;margin-left:0 !important;padding=
-top:0 !important;padding-bottom:0 !important;padding-right:0 !important;pa=
dding-left:0 !important;"/></body>
</html>

--36815eafeb90c009f5fe8044958c06d3c80b964ce7f5b300f4e35d293410--
